{
  "openapi": "3.0.0",
  "info": { "title": "Streaming runtime API", "version": "0.0.0" },
  "tags": [{ "name": "Interact" }],
  "paths": {
    "/v2beta1/interact/{projectID}/{versionID}/stream": {
      "post": {
        "summary": "Streaming runtime",
        "tags": ["Interact"],
        "operationId": "Interact_stream",
        "security": [{ "DialogManagerAPIKey": [] }],
        "parameters": [
          {
            "name": "projectID",
            "in": "path",
            "required": true,
            "description": "Voiceflow project ID can be found on the agent settings page. This is used in conjunction with a versionID.",
            "schema": { "type": "string" }
          },
          {
            "name": "versionID",
            "in": "path",
            "required": true,
            "description": "Voiceflow project version ID. You can also use 'development' to identify the version on canvas or 'production' to identify the published version.",
            "schema": { "type": "string" }
          },
          {
            "name": "accept",
            "in": "header",
            "required": false,
            "description": "Sets the Content-Type of the response to event stream format.",
            "schema": { "type": "string", "default": "text/event-stream" }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "text/event-stream": {
                "schema": { "$ref": "#/components/schemas/Interact.Event" },
                "examples": {
                  "Success": {
                    "value": {
                      "type": "trace",
                      "trace": {
                        "type": "completion-start",
                        "payload": {
                          "type": "text",
                          "completion": "Welcome to our pizza service! What can I get for you today?",
                          "tokens": {
                            "model": "dialogue_model",
                            "answer": 15,
                            "query": 5,
                            "total": 20
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n\nCould refer to a number of possible errors:\n1. 'Voiceflow project was not published to production' - Caller is contacting the production version, but the project did not publish a production version.\n2. 'Cannot resolve project version' - Caller's provided API key is potentially malformed and could not be used to resolve a version alias.\n3. 'Cannot resolve version alias' - Caller's provided API key is potentially malformed and could not be used to resolve a version alias.\n4. 'Request is missing a versionID' - Request is missing a versionID.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VoiceflowError" },
                "examples": {
                  "Not published to production": {
                    "value": {
                      "name": "verror",
                      "message": "Voiceflow project was not published to production",
                      "requestID": "ud2uASDNx"
                    }
                  },
                  "Cannot resolve project version": {
                    "value": {
                      "name": "verror",
                      "message": "Cannot resolve project version, please verify that your API key is correct.",
                      "requestID": "ud2uASDNx"
                    }
                  },
                  "Cannot resolve version alias": {
                    "value": {
                      "name": "verror",
                      "message": "Cannot resolve version alias, please verify that your API key is correct.",
                      "requestID": "ud2uASDNx"
                    }
                  },
                  "Missing versionID": {
                    "value": {
                      "name": "verror",
                      "message": "Missing versionID in request.",
                      "requestID": "ud2uASDNx"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Auth Key Required\n\nHTTP request is missing a Dialog Manager API key in the `Authorization` header.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorObject" },
                "examples": {
                  "Auth Key Required": {
                    "value": {
                      "code": 401,
                      "status": "Unauthorized",
                      "dateTime": "2022-07-22T15:02:55.882Z",
                      "timestamp": 1658502175882,
                      "data": "Auth Key Required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model not found. Ensure project is properly rendered.\n\nAttempted to interact with the 'development' version but the Prototype has not been rendered by hitting the Run button on the Voiceflow canvas.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorObject" },
                "examples": {
                  "Ensure project is properly rendered": {
                    "value": {
                      "code": 404,
                      "status": "Not Found",
                      "dateTime": "2022-07-22T15:02:55.882Z",
                      "timestamp": 1658502175882,
                      "data": "Model not found. Ensure project is properly rendered."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Interact.InteractRequest"
              },
              "example": {
                "defaultExample": {
                  "action": {
                    "type": "text",
                    "payload": "I would like to order a pizza."
                  },
                  "session": { "sessionID": "12345", "userID": "67890" }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "DialogManagerAPIKey": {
        "type": "apiKey",
        "in": "header",
        "name": "authorization",
        "description": "All requests must be validated with a Dialog Manager API Key.",
        "x-default": "$VOICEFLOW_API_KEY"
      }
    },
    "schemas": {
      "ErrorObject": {
        "type": "object",
        "description": "An error wrapper.",
        "properties": {
          "code": { "title": "HTTP status code", "type": "number" },
          "status": { "title": "HTTP status message", "type": "string" },
          "dateTime": {
            "title": "Time of when error occurred",
            "type": "string"
          },
          "timestamp": {
            "title": "Time of when error occurred in UNIX seconds",
            "type": "number"
          },
          "data": { "title": "Additional error details", "type": "string" }
        }
      },
      "VoiceflowError": {
        "type": "object",
        "description": "A Voiceflow error.",
        "properties": {
          "name": {
            "title": "Typically the string \"verror\"",
            "type": "string"
          },
          "message": { "title": "Additional error details", "type": "string" },
          "requestID": { "type": "string" }
        }
      },
      "Request": {
        "title": "Request",
        "type": "object",
        "nullable": true,
        "oneOf": [
          { "$ref": "#/components/schemas/LaunchRequest" },
          { "$ref": "#/components/schemas/TextRequest" },
          { "$ref": "#/components/schemas/IntentRequest" }
        ],
        "description": "The user's response to advance the conversation."
      },
      "LaunchRequest": {
        "title": "Launch Request",
        "type": "object",
        "description": "Starts the conversation session.",
        "properties": {
          "type": { "type": "string", "example": "launch", "enum": ["launch"] }
        },
        "required": ["type"]
      },
      "TextRequest": {
        "title": "Text Request",
        "type": "object",
        "description": "Wraps your user's text input to your chatbot and is used to advance the conversation.",
        "properties": {
          "type": { "type": "string", "enum": ["text"] },
          "payload": {
            "type": "string",
            "example": "I would like to order a huge pepperoni pizza"
          }
        },
        "required": ["type", "payload"]
      },
      "IntentRequest": {
        "title": "Intent Request",
        "type": "object",
        "description": "Wraps your user's response as an intent and is used to advance the conversation.",
        "properties": {
          "type": { "type": "string", "enum": ["intent"] },
          "payload": {
            "type": "object",
            "required": ["intent"],
            "properties": {
              "intent": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "example": "order_pizza_intent" }
                }
              },
              "query": {
                "type": "string",
                "example": "I want a large pepperoni pizza"
              },
              "entities": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["name", "value"],
                  "properties": {
                    "name": { "type": "string" },
                    "value": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "required": ["type", "payload"]
      },
      "InteractState": {
        "type": "object",
        "required": ["variables"],
        "properties": { "variables": { "type": "object" } },
        "example": { "variables": { "my_var": 1 } }
      },
      "Config": {
        "title": "Config",
        "type": "object",
        "description": "Optional settings to configure the response.",
        "properties": {
          "tts": {
            "type": "boolean",
            "default": false,
            "description": "Send back a playable text-to-speech mp3 audio snippet."
          },
          "stripSSML": {
            "type": "boolean",
            "default": true,
            "description": "Remove all SSML tags in the response message."
          },
          "stopAll": {
            "type": "boolean",
            "default": true,
            "description": "Stop on all custom traces."
          },
          "stopTypes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Specifies trace types to prematurely return on."
          },
          "excludeTypes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The trace types to exclude in the response."
          }
        }
      },
      "Interact.BaseCompletionStartTracePayload": {
        "type": "object",
        "required": ["type", "completion"],
        "properties": {
          "type": { "type": "string" },
          "completion": { "type": "string" },
          "tokens": {
            "type": "object",
            "properties": {
              "model": { "type": "string" },
              "answer": { "type": "integer" },
              "query": { "type": "integer" },
              "total": { "type": "integer" }
            },
            "required": ["model", "answer", "query", "total"]
          }
        }
      },
      "Interact.CompletionContinueTrace": {
        "type": "object",
        "required": ["type", "payload"],
        "properties": {
          "type": { "type": "string", "enum": ["completion-continue"] },
          "payload": {
            "$ref": "#/components/schemas/Interact.CompletionContinueTracePayload"
          }
        }
      },
      "Interact.CompletionContinueTracePayload": {
        "type": "object",
        "required": ["completion"],
        "properties": {
          "completion": { "type": "string" },
          "tokens": {
            "type": "object",
            "properties": {
              "answer": { "type": "integer" },
              "query": { "type": "integer" },
              "total": { "type": "integer" }
            },
            "required": ["answer", "query", "total"]
          }
        }
      },
      "Interact.CompletionEndTrace": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": { "type": "string", "enum": ["completion-end"] }
        }
      },
      "Interact.CompletionStartTrace": {
        "type": "object",
        "required": ["type", "payload"],
        "properties": {
          "type": { "type": "string", "enum": ["completion-start"] },
          "payload": {
            "$ref": "#/components/schemas/Interact.BaseCompletionStartTracePayload"
          }
        }
      },
      "Interact.CompletionStartTraceSpeak": {
        "type": "object",
        "required": ["payload"],
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/Interact.CompletionStartTraceSpeakPayload"
          }
        },
        "allOf": [
          { "$ref": "#/components/schemas/Interact.CompletionStartTrace" }
        ]
      },
      "Interact.CompletionStartTraceSpeakPayload": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": { "type": "string", "enum": ["speak"] },
          "voice": { "type": "string" }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Interact.BaseCompletionStartTracePayload"
          }
        ]
      },
      "Interact.CompletionStartTraceText": {
        "type": "object",
        "required": ["payload"],
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/Interact.CompletionStartTraceTextPayload"
          }
        },
        "allOf": [
          { "$ref": "#/components/schemas/Interact.CompletionStartTrace" }
        ]
      },
      "Interact.CompletionStartTraceTextPayload": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": { "type": "string", "enum": ["text"] },
          "delay": { "type": "integer" }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Interact.BaseCompletionStartTracePayload"
          }
        ]
      },
      "Interact.Event": {
        "type": "object",
        "required": ["type", "trace"],
        "properties": {
          "type": { "type": "string", "enum": ["trace"] },
          "trace": {
            "anyOf": [
              { "$ref": "#/components/schemas/Interact.CompletionStartTrace" },
              {
                "$ref": "#/components/schemas/Interact.CompletionContinueTrace"
              },
              { "$ref": "#/components/schemas/Interact.CompletionEndTrace" }
            ]
          }
        }
      },
      "Interact.InteractRequest": {
        "type": "object",
        "required": ["action", "session"],
        "properties": {
          "action": { "$ref": "#/components/schemas/Request" },
          "session": {
            "type": "object",
            "description": "The session object is used to update and track agent variables specific to a user's interaction session. It contains identifiers that help manage user sessions and ensure that state data like preferences and history are consistent across interactions.\n- `userID`: A unique identifier for a user. This ID should ideally be something uniquely identifying the customer, such as a user account number, email address, or a UUID generated by your system. This helps in personalizing interactions and maintaining session continuity.\n- `sessionID`: A custom identifier that uniquely identifies a session. It could be a simple counter that increments with each new session, or a timestamp-based ID that ensures uniqueness.\n",
            "properties": {
              "sessionID": { "type": "string", "default": "12345" },
              "userID": { "type": "string", "default": "67890" }
            },
            "required": ["sessionID", "userID"]
          },
          "state": {
            "description": "Represents the [state of the interaction session](https://developer.voiceflow.com/docs/state), maintaining variable values and other stateful data. This object is updated by server responses and is used to manage session progress. The state object is also used to pass in new variable values as part of the request, allowing dynamic updates to the session's state based on user interactions.\n",
            "$ref": "#/components/schemas/InteractState"
          }
        },
        "example": {
          "action": {
            "type": "text",
            "payload": "I would like to order a pizza."
          },
          "session": { "sessionID": "12345", "userID": "67890" }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://general-runtime.voiceflow.com",
      "description": "Production endpoint",
      "variables": {}
    }
  ]
}
